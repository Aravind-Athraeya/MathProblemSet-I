// ConsoleApplication2.cpp : Defines the entry point for the console application.
//comback
#include "stdafx.h"
#include <set>
#include <iostream>

#include<conio.h>
#include <sstream>

#include<stdio.h>


#include<stdlib.h>
#include <queue> 
#include <unordered_set>

using namespace std;
// Convexc Hull
//Jarvis March Algorithm -- 

// Step 1 - Find left most point and start from there
// Step 2 - Proceed counter clockwise - As in - from the points perspective - Look for the left side from a stright line  --https://www.youtube.com/watch?v=Vu84lmMzP2o
// Step 3 - Add ot the lsit and If cpollinear points - Just incldue
// Step 4 -  Matrix dot product



struct Point
{
	int x, y;

};



// 0 --> p, q and r are colinear  -- P - current , Q - iteative other points  , R
// 1 --> Clockwise 
// 2 --> Counterclockwise
int orientation(Point p, Point q, Point r)
{
	// Matrix dot product  - Angle between two vectors ab and ac.
	// Yaengle  = Kuppy Rocks! ; Flip x and y for the second half
	// (qp)y * (rq)x - (qp)x * (rq)y
	int val = (q.y - p.y) * (r.x - q.x) -
		(q.x - p.x) * (r.y - q.y);

	if (val == 0) return 0;  // colinear 
	return (val > 0) ? 1 : 2; // clock or counterclock wise 

}
void convexHull(Point points[], int n)
{
	// There must be at least 3 points 
	if (n < 3) return;

	// Initialize Result 
	vector<Point> hull;

	// Find the leftmost point 
	int l = 0;
	for (int i = 1; i < n; i++)
	if (points[i].x < points[l].x)
		l = i;

	// Start from leftmost point, keep moving counterclockwise 
	// until reach the start point again.  This loop runs O(h) 
	// times where h is number of points in result or output. 
	int p = l, q;
	do
	{
		// Add current point to result 
		hull.push_back(points[p]);

		//This logic will get you the index of the any other point except the current one, since n > p,q
		q = (p + 1) % n;
		for (int i = 0; i < n; i++)
		{
			// If i is more counterclockwise than current q, then 
			// update q 
			if (orientation(points[p], points[i], points[q]) == 2)
				q = i;
		}

		// Now q is the most counterclockwise with respect to p 
		// Set p as q for next iteration, so that q is added to 
		// result 'hull' 
		p = q;

	} while (p != l);  // While we don't come to first point 

	// Print Result 
	for (int i = 0; i < hull.size(); i++)
		cout << "(" << hull[i].x << ", "
		<< hull[i].y << ")\n";
}



int main()
{

	Point points[] = { { 0, 3 }, { 2, 2 }, { 1, 1 }, { 2, 1 },
	{ 3, 0 }, { 0, 0 }, { 3, 3 } };

	int n = sizeof(points) / sizeof(points[0]);
    convexHull(points, n);




	return 0;



}
