// ConsoleApplication2.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <set>
#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h>
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;
// https://www.youtube.com/watch?v=GSBLe8cKu0s

// Step 1 - Sort by all x coordinates
// Step 2 - Have a priority queue
// Step 3 - if start,Add to Queue and Priority queue max value change - > Add to output for skyline(x,y)
// Step 4 - if end, remove from queue and Priority queue max value change - > Add to output for skyline(x,high value in Queue)
// Step 5 - Handle the three edge cases a) When two builds start together . Check the tall one first. b) When two builds end together . Check the short one first. c) Consecutive building. Check the tall one first.

struct Building
{
	int start;  
	int height;  
	int end; 
};


struct BuildingPoint
{
	int x;
	bool isStart;
	int height;
};

bool XCoordinatecomp(const BuildingPoint& lhs, const BuildingPoint& rhs)
{
	return lhs.x < rhs.x;
}

void Skyline(Building building[], int l, int count)
{

	std::priority_queue<int> q;
	multiset<int> m;
	BuildingPoint BuildingPointList[5 * 2];
	int bpIndex = 0;
	for (int i = 0; i <= count; i++)
	{

		BuildingPoint bpstart;
		bpstart.x = building[i].start;
		bpstart.isStart = true;
		bpstart.height = building[i].height;

		BuildingPoint bpend;
		bpend.x = building[i].end;
		bpend.isStart = false;
		bpend.height = building[i].height;

		BuildingPointList[bpIndex] = bpstart;
		BuildingPointList[bpIndex + 1] = bpend;

		bpIndex = bpIndex + 2;


	}

	sort(BuildingPointList, BuildingPointList + bpIndex, XCoordinatecomp);

	// Manipulate the Queue with Buildpoints
	int prevMaxHeight = 0;
	vector<pair<pair<int, int>,bool>> result;
	m.insert(prevMaxHeight);
	for (BuildingPoint buildingPoint : BuildingPointList) {


		if (buildingPoint.isStart)
		{
			// Start and if height change. Add to result
			//q.push(buildingPoint.height);
			m.insert(buildingPoint.height);

		}
		else
		{
			//q.pop(); //Removes the end element height from the queue not the top element from the queue
			// We only need to remove the height corresponging to the end of the building and not remove the top
			m.erase(m.find(buildingPoint.height));
		}


		int currentMaxHeight = *m.rbegin();
		if (prevMaxHeight != currentMaxHeight) {
			result.push_back(std::make_pair(std::make_pair(buildingPoint.x, currentMaxHeight), buildingPoint.isStart));
			prevMaxHeight = currentMaxHeight;
		}


	}


	// Handle Three edge cases



	for (int i = 1; i < result.size(); i++)
	{
	
		// a) When two builds start together, take the highest one
		// Since it is sorted  by X, you can compare first with first -
		if (result[i - 1].second  &&  result[i].second && (result[i - 1].first.first == result[i].first.first))
		{	
			if (result[i - 1].first.second > result[i].first.second)
				result.erase(result.begin() + i);
			else
				result.erase(result.begin() + i - 1);
	
		}

		// b) When two builds end together,, take the lowest one
		if (!result[i - 1].second  &&  !result[i].second && (result[i - 1].first.first == result[i].first.first))
		{
			if (result[i - 1].first.second > result[i].first.second)			
			   result.erase(result.begin() + i - 1);
			else
				result.erase(result.begin() + i);

		}

		// c) Consecutive building.Check the tall one first.
		//This code can be merged with a)  But keeping it seperate for readbility
		if ((!result[i - 1].second == result[i].second) && (result[i - 1].first.first == result[i].first.first))
		{
			if (result[i - 1].first.second > result[i].first.second)
				result.erase(result.begin() + i);
			else
				result.erase(result.begin() + i - 1);

		}

	}
	
	for (auto& p : result)
	{
		std::cout << p.first.first << ", " << p.first.second << std::endl;
	}

}


int main()
{

	Building arr[] = { { 1, 3, 3 }, { 2, 4, 4 }, { 5, 2, 8 }, { 6, 4, 7 }, { 8, 4, 9 }};
	int n = sizeof(arr) / sizeof(arr[0]);

	Skyline(arr, 0, n - 1);
	return 0;

}
